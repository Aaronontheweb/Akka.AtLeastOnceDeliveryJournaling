// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeDuplicationMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Persistence.Extras.Serialization.Msgs {

  /// <summary>Holder for reflection information generated from DeDuplicationMessages.proto</summary>
  internal static partial class DeDuplicationMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for DeDuplicationMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeDuplicationMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtEZUR1cGxpY2F0aW9uTWVzc2FnZXMucHJvdG8SKkFra2EuUGVyc2lzdGVu",
            "Y2UuRXh0cmFzLlNlcmlhbGl6YXRpb24uTXNncxoORW52ZWxvcGUucHJvdG8i",
            "OAoMQ29uZmlybWF0aW9uEhYKDmNvbmZpcm1hdGlvbklkGAEgASgDEhAKCHNl",
            "bmRlcklkGAIgASgJIjgKGVJlY2VpdmVkTWVzc2FnZUNvbGxlY3Rpb24SGwoP",
            "Y29uZmlybWF0aW9uSWRzGAEgAygDQgIQASKeAwoVUmVjZWl2ZXJTdGF0ZVNu",
            "YXBzaG90EmUKCnRyYWNrZWRJZHMYASADKAsyUS5Ba2thLlBlcnNpc3RlbmNl",
            "LkV4dHJhcy5TZXJpYWxpemF0aW9uLk1zZ3MuUmVjZWl2ZXJTdGF0ZVNuYXBz",
            "aG90LlRyYWNrZWRJZHNFbnRyeRJtCg50cmFja2VkU2VuZGVycxgCIAMoCzJV",
            "LkFra2EuUGVyc2lzdGVuY2UuRXh0cmFzLlNlcmlhbGl6YXRpb24uTXNncy5S",
            "ZWNlaXZlclN0YXRlU25hcHNob3QuVHJhY2tlZFNlbmRlcnNFbnRyeRoxCg9U",
            "cmFja2VkSWRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgDOgI4",
            "ARp8ChNUcmFja2VkU2VuZGVyc0VudHJ5EgsKA2tleRgBIAEoCRJUCgV2YWx1",
            "ZRgCIAEoCzJFLkFra2EuUGVyc2lzdGVuY2UuRXh0cmFzLlNlcmlhbGl6YXRp",
            "b24uTXNncy5SZWNlaXZlZE1lc3NhZ2VDb2xsZWN0aW9uOgI4ASKHAQoZQ29u",
            "cmltYWJsZU1lc3NhZ2VFbnZlbG9wZRIWCg5jb25maXJtYXRpb25JZBgBIAEo",
            "AxIQCghzZW5kZXJJZBgCIAEoCRJACgNtc2cYAyABKAsyMy5Ba2thLlBlcnNp",
            "c3RlbmNlLkV4dHJhcy5TZXJpYWxpemF0aW9uLk1zZ3MuUGF5bG9hZGIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Akka.Persistence.Extras.Serialization.Msgs.EnvelopeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Extras.Serialization.Msgs.Confirmation), global::Akka.Persistence.Extras.Serialization.Msgs.Confirmation.Parser, new[]{ "ConfirmationId", "SenderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Extras.Serialization.Msgs.ReceivedMessageCollection), global::Akka.Persistence.Extras.Serialization.Msgs.ReceivedMessageCollection.Parser, new[]{ "ConfirmationIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Extras.Serialization.Msgs.ReceiverStateSnapshot), global::Akka.Persistence.Extras.Serialization.Msgs.ReceiverStateSnapshot.Parser, new[]{ "TrackedIds", "TrackedSenders" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Persistence.Extras.Serialization.Msgs.ConrimableMessageEnvelope), global::Akka.Persistence.Extras.Serialization.Msgs.ConrimableMessageEnvelope.Parser, new[]{ "ConfirmationId", "SenderId", "Msg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Used to persist individual confirmations
  /// </summary>
  internal sealed partial class Confirmation : pb::IMessage<Confirmation> {
    private static readonly pb::MessageParser<Confirmation> _parser = new pb::MessageParser<Confirmation>(() => new Confirmation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Confirmation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Extras.Serialization.Msgs.DeDuplicationMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Confirmation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Confirmation(Confirmation other) : this() {
      confirmationId_ = other.confirmationId_;
      senderId_ = other.senderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Confirmation Clone() {
      return new Confirmation(this);
    }

    /// <summary>Field number for the "confirmationId" field.</summary>
    public const int ConfirmationIdFieldNumber = 1;
    private long confirmationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfirmationId {
      get { return confirmationId_; }
      set {
        confirmationId_ = value;
      }
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 2;
    private string senderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderId {
      get { return senderId_; }
      set {
        senderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Confirmation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Confirmation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfirmationId != other.ConfirmationId) return false;
      if (SenderId != other.SenderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfirmationId != 0L) hash ^= ConfirmationId.GetHashCode();
      if (SenderId.Length != 0) hash ^= SenderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfirmationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConfirmationId);
      }
      if (SenderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfirmationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConfirmationId);
      }
      if (SenderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Confirmation other) {
      if (other == null) {
        return;
      }
      if (other.ConfirmationId != 0L) {
        ConfirmationId = other.ConfirmationId;
      }
      if (other.SenderId.Length != 0) {
        SenderId = other.SenderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfirmationId = input.ReadInt64();
            break;
          }
          case 18: {
            SenderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data for storing DeDuplicatingReceiveActor snapshots
  /// </summary>
  internal sealed partial class ReceivedMessageCollection : pb::IMessage<ReceivedMessageCollection> {
    private static readonly pb::MessageParser<ReceivedMessageCollection> _parser = new pb::MessageParser<ReceivedMessageCollection>(() => new ReceivedMessageCollection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceivedMessageCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Extras.Serialization.Msgs.DeDuplicationMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceivedMessageCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceivedMessageCollection(ReceivedMessageCollection other) : this() {
      confirmationIds_ = other.confirmationIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceivedMessageCollection Clone() {
      return new ReceivedMessageCollection(this);
    }

    /// <summary>Field number for the "confirmationIds" field.</summary>
    public const int ConfirmationIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_confirmationIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> confirmationIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ConfirmationIds {
      get { return confirmationIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceivedMessageCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceivedMessageCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!confirmationIds_.Equals(other.confirmationIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= confirmationIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      confirmationIds_.WriteTo(output, _repeated_confirmationIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += confirmationIds_.CalculateSize(_repeated_confirmationIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceivedMessageCollection other) {
      if (other == null) {
        return;
      }
      confirmationIds_.Add(other.confirmationIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            confirmationIds_.AddEntriesFrom(input, _repeated_confirmationIds_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReceiverStateSnapshot : pb::IMessage<ReceiverStateSnapshot> {
    private static readonly pb::MessageParser<ReceiverStateSnapshot> _parser = new pb::MessageParser<ReceiverStateSnapshot>(() => new ReceiverStateSnapshot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiverStateSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Extras.Serialization.Msgs.DeDuplicationMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverStateSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverStateSnapshot(ReceiverStateSnapshot other) : this() {
      trackedIds_ = other.trackedIds_.Clone();
      trackedSenders_ = other.trackedSenders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverStateSnapshot Clone() {
      return new ReceiverStateSnapshot(this);
    }

    /// <summary>Field number for the "trackedIds" field.</summary>
    public const int TrackedIdsFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_trackedIds_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 10);
    private readonly pbc::MapField<string, long> trackedIds_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> TrackedIds {
      get { return trackedIds_; }
    }

    /// <summary>Field number for the "trackedSenders" field.</summary>
    public const int TrackedSendersFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Akka.Persistence.Extras.Serialization.Msgs.ReceivedMessageCollection>.Codec _map_trackedSenders_codec
        = new pbc::MapField<string, global::Akka.Persistence.Extras.Serialization.Msgs.ReceivedMessageCollection>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Akka.Persistence.Extras.Serialization.Msgs.ReceivedMessageCollection.Parser), 18);
    private readonly pbc::MapField<string, global::Akka.Persistence.Extras.Serialization.Msgs.ReceivedMessageCollection> trackedSenders_ = new pbc::MapField<string, global::Akka.Persistence.Extras.Serialization.Msgs.ReceivedMessageCollection>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Akka.Persistence.Extras.Serialization.Msgs.ReceivedMessageCollection> TrackedSenders {
      get { return trackedSenders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiverStateSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiverStateSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!TrackedIds.Equals(other.TrackedIds)) return false;
      if (!TrackedSenders.Equals(other.TrackedSenders)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= TrackedIds.GetHashCode();
      hash ^= TrackedSenders.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trackedIds_.WriteTo(output, _map_trackedIds_codec);
      trackedSenders_.WriteTo(output, _map_trackedSenders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trackedIds_.CalculateSize(_map_trackedIds_codec);
      size += trackedSenders_.CalculateSize(_map_trackedSenders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiverStateSnapshot other) {
      if (other == null) {
        return;
      }
      trackedIds_.Add(other.trackedIds_);
      trackedSenders_.Add(other.trackedSenders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            trackedIds_.AddEntriesFrom(input, _map_trackedIds_codec);
            break;
          }
          case 18: {
            trackedSenders_.AddEntriesFrom(input, _map_trackedSenders_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used to serialize confirmable message envelopes over the network
  /// </summary>
  internal sealed partial class ConrimableMessageEnvelope : pb::IMessage<ConrimableMessageEnvelope> {
    private static readonly pb::MessageParser<ConrimableMessageEnvelope> _parser = new pb::MessageParser<ConrimableMessageEnvelope>(() => new ConrimableMessageEnvelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConrimableMessageEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Persistence.Extras.Serialization.Msgs.DeDuplicationMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConrimableMessageEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConrimableMessageEnvelope(ConrimableMessageEnvelope other) : this() {
      confirmationId_ = other.confirmationId_;
      senderId_ = other.senderId_;
      Msg = other.msg_ != null ? other.Msg.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConrimableMessageEnvelope Clone() {
      return new ConrimableMessageEnvelope(this);
    }

    /// <summary>Field number for the "confirmationId" field.</summary>
    public const int ConfirmationIdFieldNumber = 1;
    private long confirmationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfirmationId {
      get { return confirmationId_; }
      set {
        confirmationId_ = value;
      }
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 2;
    private string senderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderId {
      get { return senderId_; }
      set {
        senderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private global::Akka.Persistence.Extras.Serialization.Msgs.Payload msg_;
    /// <summary>
    /// the underlying message that is paired with this envelope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Persistence.Extras.Serialization.Msgs.Payload Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConrimableMessageEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConrimableMessageEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfirmationId != other.ConfirmationId) return false;
      if (SenderId != other.SenderId) return false;
      if (!object.Equals(Msg, other.Msg)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfirmationId != 0L) hash ^= ConfirmationId.GetHashCode();
      if (SenderId.Length != 0) hash ^= SenderId.GetHashCode();
      if (msg_ != null) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfirmationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConfirmationId);
      }
      if (SenderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderId);
      }
      if (msg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfirmationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConfirmationId);
      }
      if (SenderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderId);
      }
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConrimableMessageEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.ConfirmationId != 0L) {
        ConfirmationId = other.ConfirmationId;
      }
      if (other.SenderId.Length != 0) {
        SenderId = other.SenderId;
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          msg_ = new global::Akka.Persistence.Extras.Serialization.Msgs.Payload();
        }
        Msg.MergeFrom(other.Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfirmationId = input.ReadInt64();
            break;
          }
          case 18: {
            SenderId = input.ReadString();
            break;
          }
          case 26: {
            if (msg_ == null) {
              msg_ = new global::Akka.Persistence.Extras.Serialization.Msgs.Payload();
            }
            input.ReadMessage(msg_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
